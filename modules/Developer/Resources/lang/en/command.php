<?php
return [
    'create'                  => 'Create',
    'model.title'             => 'Model',
    'model.name.label'        => 'Name',
    'model.name.help'         => 'For example: test, Test will be created',
    'model.table.label'       => 'Table name',
    'model.table.help'        => 'If the data table associated with the model is not filled in, the plural number of the model name will be used as the table name. When the table exists, the corresponding model property of the table will be generated automatically',
    'console.title'           => 'Artisan command',
    'console.help'            => 'You need to register in the register method of the ServiceProvider of the current module before it can take effect.',
    'console.name.label'      => 'Command name',
    'console.name.help'       => 'For example: test, TestCommand will be created',
    'request.title'           => 'Request',
    'request.name.label'      => 'Name',
    'request.name.help'       => 'For example: test, TestRequest will be created',
    'provider.title'          => 'Service Provider',
    'provider.help'           => 'It needs to be registered in the provider attribute of the module. JSON of the current module before it can take effect.',
    'provider.name.label'     => 'Name',
    'provider.name.help'      => 'For example: test, TestServiceProvider will be created',
    'provider.type.label'     => 'Type',
    'provider.type.help'      => '',
    'provider.type.plain'     => 'General service provider',
    'provider.type.event'     => 'Event service provider',
    'provider.type.route'     => 'Route service provider',
    'middleware.title'        => 'Middleware',
    'middleware.help'         => 'You need to register in the boot method of the ServiceProvider of the current module before it can take effect.',
    'middleware.name.label'   => 'Name',
    'middleware.name.help'    => 'For example: test, TestMiddleware will be created',
    'event.title'             => 'Event',
    'event.name.label'        => 'Name',
    'event.name.help'         => 'For example: test, Test will be created',
    'listener.title'          => 'Listener',
    'listener.name.label'     => 'Name',
    'listener.name.help'      => 'For example: test, Test will be created',
    'listener.event.label'    => 'Event name',
    'listener.event.help'     => 'The current module only needs to input the basic class name for the event event it listens to',
    'listener.queued.label'   => 'Use queue or not',
    'listener.queued.help'    => '',
    'factory.title'           => 'Factory',
    'factory.name.label'      => 'Name',
    'factory.name.help'       => 'For example: test, TestFactory will be created',
    'mail.title'              => 'Mail',
    'mail.name.label'         => 'Name',
    'mail.name.help'          => 'For example: test, Test will be created',
    'notification.title'      => 'Notification',
    'notification.name.label' => 'Name',
    'notification.name.help'  => 'For example: test, Test will be created',
    'seeder.title'            => 'Seeder',
    'seeder.name.label'       => 'Name',
    'seeder.name.help'        => 'For example: test, TestDatabaseSeeder or TestTableSeeder will be created',
    'seeder.master.label'     => 'Seeder type',
    'seeder.master.help'      => 'Select Yes to create TestDatabaseSeeder and no to create TestTableSeeder',
    'rule.title'              => 'Rules',
    'rule.name.label'         => 'Name',
    'rule.name.help'          => 'For example: test, Test will be created',
    'trait.title'             => 'Trait',
    'trait.name.label'        => 'Name',
    'trait.name.help'         => 'For example: test, Test will be created',
    'data.title'              => 'Data',
    'data.name.label'         => 'Name',
    'data.name.help'          => 'For example: test, test will be created',
    'hook.title'              => 'Hook',
    'hook.name.label'         => 'Name',
    'hook.name.help'          => 'For example: test, Test will be created',
    'job.title'               => 'Job',
    'job.name.label'          => 'Name',
    'job.name.help'           => 'For example: test, Test will be created',
    'job.sync.label'          => 'Sync job',
    'job.sync.help'           => '',
    'policy.title'            => 'Policy strategy',
    'policy.help'             => 'You need to register in the boot method of the ServiceProvider of the current module before it can take effect.',
    'policy.name.label'       => 'Name',
    'policy.name.help'        => 'For example: test, Test will be created',
    'test.title'              => 'Test',
    'test.help'               => '',
    'test.name.label'         => 'Name',
    'test.name.help'          => 'For example: test, Test will be created',
    'test.type.label'         => 'Type',
    'test.type.help'          => '',
    'test.type.unit'          => 'Unit testing, which is carried out for a small and relatively independent part of the code',
    'test.type.feature'       => 'Feature testing, testing of large area code',
];
